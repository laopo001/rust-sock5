name: build
on:
  workflow_dispatch: {}
jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: windows
            os: windows-2019
            rust: nightly-x86_64-msvc
            target: x86_64-pc-windows-msvc
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --verbose --examples --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      - name: Strip binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/examples/client" && strip "target/${{ matrix.target }}/release/examples/server"

      - name: Build archive
        shell: bash
        run: |
          mkdir bin
          cd bin
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "../target/${{ matrix.target }}/release/examples/client.exe" ./client-${{ matrix.target }}.exe
            cp "../target/${{ matrix.target }}/release/examples/server.exe" ./server-${{ matrix.target }}.exe
          else
            cp "../target/${{ matrix.target }}/release/examples/client" ./client-${{ matrix.target }}
            cp "../target/${{ matrix.target }}/release/examples/server" ./server-${{ matrix.target }}
          fi
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            bin/*